//
//To Optimize : https://zz85.github.io/glsl-optimizer/
//

uniform sampler2D texUnit;
uniform float fWidth;
uniform float fHeight;
uniform float top;
uniform float left;
uniform float right;
uniform float bottom;
uniform int effectenable;
uniform int vhsEffect;
uniform float iTime;
uniform int grayscale;
uniform int sharpenMasking;
uniform int tone;
uniform int colorboost;
uniform int denoise;
uniform int filmgrain;
uniform float sharpness;
uniform float contrast;
uniform float brightness;
uniform float red;
uniform float green;
uniform float blue;

uniform float sigma;
uniform float threshold;
uniform float kSigma;

uniform float timer;


const float permTexUnit = 1.0/256.0;		// Perm texture texel-size
const float permTexUnitHalf = 0.5/256.0;	// Half perm texture texel-size
const float grainamount = 0.03; //grain amount
const float INV_SQRT_OF_2PI = 0.39894228040143267793994605993439;
const float INV_PI = 0.31830988618379067153776752674503;

//a random texture generator, but you can also use a pre-computed perturbation texture
vec4 rnm(in vec2 tc) 
{
    float noise =  sin(dot(tc + vec2(timer,timer),vec2(12.9898,78.233))) * 43758.5453;

	float noiseR =  fract(noise)*2.0-1.0;
	float noiseG =  fract(noise*1.2154)*2.0-1.0; 
	float noiseB =  fract(noise*1.3453)*2.0-1.0;
	float noiseA =  fract(noise*1.3647)*2.0-1.0;
	
	return vec4(noiseR,noiseG,noiseB,noiseA);
}

float fade(in float t) {
	return t*t*t*(t*(t*6.0-15.0)+10.0);
}

float pnoise3D(in vec3 p)
{
	vec3 pi = permTexUnit*floor(p)+permTexUnitHalf; // Integer part, scaled so +1 moves permTexUnit texel
	// and offset 1/2 texel to sample texel centers
	vec3 pf = fract(p);     // Fractional part for interpolation

	// Noise contributions from (x=0, y=0), z=0 and z=1
	float perm00 = rnm(pi.xy).a ;
	vec3  grad000 = rnm(vec2(perm00, pi.z)).rgb * 4.0 - 1.0;
	float n000 = dot(grad000, pf);
	vec3  grad001 = rnm(vec2(perm00, pi.z + permTexUnit)).rgb * 4.0 - 1.0;
	float n001 = dot(grad001, pf - vec3(0.0, 0.0, 1.0));

	// Noise contributions from (x=0, y=1), z=0 and z=1
	float perm01 = rnm(pi.xy + vec2(0.0, permTexUnit)).a ;
	vec3  grad010 = rnm(vec2(perm01, pi.z)).rgb * 4.0 - 1.0;
	float n010 = dot(grad010, pf - vec3(0.0, 1.0, 0.0));
	vec3  grad011 = rnm(vec2(perm01, pi.z + permTexUnit)).rgb * 4.0 - 1.0;
	float n011 = dot(grad011, pf - vec3(0.0, 1.0, 1.0));

	// Noise contributions from (x=1, y=0), z=0 and z=1
	float perm10 = rnm(pi.xy + vec2(permTexUnit, 0.0)).a ;
	vec3  grad100 = rnm(vec2(perm10, pi.z)).rgb * 4.0 - 1.0;
	float n100 = dot(grad100, pf - vec3(1.0, 0.0, 0.0));
	vec3  grad101 = rnm(vec2(perm10, pi.z + permTexUnit)).rgb * 4.0 - 1.0;
	float n101 = dot(grad101, pf - vec3(1.0, 0.0, 1.0));

	// Noise contributions from (x=1, y=1), z=0 and z=1
	float perm11 = rnm(pi.xy + vec2(permTexUnit, permTexUnit)).a ;
	vec3  grad110 = rnm(vec2(perm11, pi.z)).rgb * 4.0 - 1.0;
	float n110 = dot(grad110, pf - vec3(1.0, 1.0, 0.0));
	vec3  grad111 = rnm(vec2(perm11, pi.z + permTexUnit)).rgb * 4.0 - 1.0;
	float n111 = dot(grad111, pf - vec3(1.0, 1.0, 1.0));

	// Blend contributions along x
	vec4 n_x = mix(vec4(n000, n001, n010, n011), vec4(n100, n101, n110, n111), fade(pf.x));

	// Blend contributions along y
	vec2 n_xy = mix(n_x.xy, n_x.zw, fade(pf.y));

	// Blend contributions along z
	float n_xyz = mix(n_xy.x, n_xy.y, fade(pf.z));

	// We're done, return the final noise value.
	return n_xyz;
}



//  smartDeNoise - parameters
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
//  sampler2D tex     - sampler image / texture
//  vec2 uv           - actual fragment coord
//  float sigma  >  0 - sigma Standard Deviation
//  float kSigma >= 0 - sigma coefficient 
//      kSigma * sigma  -->  radius of the circular kernel
//  float threshold   - edge sharpening threshold 


//------------------------------------------------------------
//TextureValue													   
//------------------------------------------------------------
vec4 TextureValue(float posX, float posY, float xDiff, float yDiff)
{
	float texelSizeX = 1.0 / fWidth; //size of one texel 
	float texelSizeY = 1.0 / fHeight; //size of one texel 
	vec2 resolution = vec2(texelSizeX, texelSizeY); 
	return texture2D(texUnit, vec2(posX,posY) + resolution * vec2(xDiff, yDiff));
}



//------------------------------------------------------------
//ContrastFilter													   
//------------------------------------------------------------
vec4 ContrastFilter(vec4 color,float contrast, float offset)
{
	float csupp = contrast * (offset - 256.0) + 128.0;
	
	float red = contrast * (color.r * 255.0) + csupp;
	if (red < 0.0)
		red = 0.0;
	else if (red > 255.0)
		red = 255.0;	
		
	float blue = contrast * (color.b * 255.0) + csupp;
	if (blue < 0.0)
		blue = 0.0;
	else if (blue > 255.0)
		blue = 255.0;	

	float green = contrast * (color.g * 255.0) + csupp;
	if (green < 0.0)
		green = 0.0;
	else if (green > 255.0)
		green = 255.0;

	return vec4(red / 255.0, green / 255.0, blue / 255.0, color.a);		

}

//------------------------------------------------------------
//LightnessFilter													   
//------------------------------------------------------------
vec4 LightnessFilter(vec4 color)
{
	float nChange = (2.55 * brightness) / 255.0;
	return vec4(color.r + nChange, color.g + nChange, color.b + nChange, color.a);
}

//------------------------------------------------------------
//VHS Filter													   
//------------------------------------------------------------
const float range = 0.05;
const float noiseQuality = 250.0;
const float noiseIntensity = 0.0088;
const float offsetIntensity = 0.02;
const float colorOffsetIntensity = 1.3;

float rand(vec2 co)
{
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

float verticalBar(float pos, float uvY, float offset)
{
    float edge0 = (pos - range);
    float edge1 = (pos + range);

    float x = smoothstep(edge0, pos, uvY) * offset;
    x -= smoothstep(pos, edge1, uvY) * offset;
    return x;
}

vec4 vhsImage(vec4 color)
{
    vec2 uv;
	uv.x = gl_TexCoord[0].s;
	uv.y = gl_TexCoord[0].t;   

    for (float i = 0.0; i < 0.71; i += 0.1313)
    {
        float d = mod(iTime * i, 1.7);
        float o = sin(1.0 - tan(iTime * 0.24 * i));
    	o *= offsetIntensity;
        uv.x += verticalBar(d, uv.y, o);
    }
    
    float uvY = uv.y;
    uvY *= noiseQuality;
    uvY = float(int(uvY)) * (1.0 / noiseQuality);
    float noise = rand(vec2(iTime * 0.00001, uvY));
    uv.x += noise * noiseIntensity;

    vec2 offsetR = vec2(0.006 * sin(iTime), 0.0) * colorOffsetIntensity;
    vec2 offsetG = vec2(0.0073 * (cos(iTime * 0.97)), 0.0) * colorOffsetIntensity;
    
    float r = clamp(texture2D(texUnit, uv + offsetR).r,0.0,1.0);
    float g = clamp(texture2D(texUnit, uv + offsetG).g,0.0,1.0);
    float b = clamp(texture2D(texUnit, uv).b,0.0,1.0);

    return vec4(r, g, b, 1.0);
}

//------------------------------------------------------------
//ApplyFilter													   
//------------------------------------------------------------
vec4 ApplyFilter(vec4 src_color)
{	
	if(sharpenMasking == 1)
	{
		vec4 sum;
		float posX = gl_TexCoord[0].s;
		float posY = gl_TexCoord[0].t;
		sum =  TextureValue(posX, posY, -1.0, -1.0);
		sum += TextureValue(posX, posY, 0.0, -1.0);
		sum += TextureValue(posX, posY, 1.0, -1.0);
		sum += TextureValue(posX, posY, -1.0, 0.0);
		sum += src_color;
		sum += TextureValue(posX, posY, 1.0, 0.0);
		sum += TextureValue(posX, posY, -1.0, 1.0);
		sum += TextureValue(posX, posY, 0.0, 1.0);
		sum += TextureValue(posX, posY, 1.0, 1.0);
		vec4 blur = sum / vec4(9.0,9.0,9.0,9.0);
		src_color = src_color + (src_color - blur) * sharpness;		
	}

	if(tone == 1)
	{
		if (contrast == 0.0)
		{
			src_color = ContrastFilter(src_color, 1.0, 128.0);
		}
		else if (contrast > 0.0)
		{
			float offset = contrast;
			offset /= 100.0;
			offset = 1.0 + offset;
			src_color = ContrastFilter(src_color, offset, 128.0);
		}
		else if (contrast < 0.0)
		{
			float offset = -contrast;
			offset /= 100.0;
			offset = 1.0 - offset;
			src_color = ContrastFilter(src_color, offset, 128.0);
		}
	
		src_color = LightnessFilter(src_color);
	}

	if(colorboost == 1)
	{
		float _localred = red / 255.0; 
		float _localgreen = green / 255.0; 
		float _localblue = blue / 255.0; 

		_localred = src_color.r + _localred;
		_localgreen = src_color.g + _localgreen;
		_localblue = src_color.b + _localblue;

		if (_localred > 1.0)
			_localred = 1.0;

		if(_localred < 0.0)
			_localred = 0.0;

		if (_localgreen > 1.0)
			_localgreen = 1.0;

		if(_localgreen < 0.0)
			_localgreen = 0.0;

		if (_localblue > 1.0)
			_localblue = 1.0;

		if(_localblue < 0.0)
			_localblue = 0.0;

		src_color = vec4(_localred, _localgreen, _localblue, src_color.a);
	}

	if(grayscale == 1)
	{
		float sum = src_color.r * 0.299 + src_color.b * 0.114 + src_color.g * 0.587;
		src_color = vec4(sum, sum, sum, src_color.a);
	}
	
	return src_color;
}

//------------------------------------------------------------
//Denoise													   
//------------------------------------------------------------
vec4 Denoise(vec4 centrPx, sampler2D tex)
{
    float radius = floor(kSigma*sigma);
    float radQ = radius * radius;

    float invSigmaQx2 = .5 / (sigma * sigma);      // 1.0 / (sigma^2 * 2.0)
    float invSigmaQx2PI = INV_PI * invSigmaQx2;    // // 1/(2 * PI * sigma^2)

    float invThresholdSqx2 = .5 / (threshold * threshold);     // 1.0 / (sigma^2 * 2.0)
    float invThresholdSqrt2PI = INV_SQRT_OF_2PI / threshold;   // 1.0 / (sqrt(2*PI) * sigma)

    float zBuff = 0.0;
    vec4 aBuff = vec4(0.0);
	
	float posX = gl_TexCoord[0].s;
	float posY = gl_TexCoord[0].t;	

    vec2 d;
    for (d.x=-radius; d.x <= radius; d.x++) {
        float pt = sqrt(radQ-d.x*d.x);       // pt = yRadius: have circular trend
        for (d.y=-pt; d.y <= pt; d.y++) {
            float blurFactor = exp( -dot(d , d) * invSigmaQx2 ) * invSigmaQx2PI;

			vec4 walkPx = ApplyFilter(TextureValue(posX, posY, d.x, d.y));
            vec4 dC = walkPx-centrPx;
            float deltaFactor = exp( -dot(dC, dC) * invThresholdSqx2) * invThresholdSqrt2PI * blurFactor;

            zBuff += deltaFactor;
            aBuff += deltaFactor*walkPx;
        }
    }
    return aBuff/zBuff;
}
//------------------------------------------------------------
//Main code													   
//------------------------------------------------------------
void main(void)
{		
	float x = gl_TexCoord[0].s;
	float y = gl_TexCoord[0].t;
	vec2 tex_coord = gl_TexCoord[0].st;
	vec4 src_color = texture2D(texUnit, tex_coord).rgba;
		
	if(x > left && x < right && y > top && y < bottom)													
	{
		if(effectenable == 0)
		{
			gl_FragColor = src_color;
			return;
		}
		
        if(vhsEffect == 1)
        {
            src_color = vhsImage(src_color);
        }		
		
		src_color = ApplyFilter(src_color);
		
		if(denoise == 1)
		{
			src_color = Denoise(src_color, texUnit);
		}

		if(filmgrain == 1)
		{
			vec4 noise = vec4(pnoise3D(vec3(tex_coord*vec2(fWidth,fHeight),0.0)));
		  
			if(grayscale == 0)
			{
				noise.g = pnoise3D(vec3(tex_coord*vec2(fWidth,fHeight),1.0));
				noise.b = pnoise3D(vec3(tex_coord*vec2(fWidth,fHeight),2.0));
			}
			
			src_color = src_color+noise*grainamount;
		}


	}
	gl_FragColor = src_color;
}


