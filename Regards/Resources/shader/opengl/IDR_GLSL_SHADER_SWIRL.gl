uniform sampler2D textureScreen;
uniform float widthScreen;
uniform float heightScreen;
uniform float widthBitmap;
uniform float heightBitmap;
uniform float left;
uniform float top;

// Swirl effect parameters
uniform float radius;
uniform float angleDegree;

vec2 PostFX(float x, float y)
{
  //Calcul du centre
  vec2 center = vec2(widthBitmap / 2.0, heightBitmap / 2.0);
  vec2 tc = vec2(x, y);
  
  float angle = radians(angleDegree);
  
  tc -= center;
  float dist = length(tc);
  if (dist < radius) 
  {
    float percent = (radius - dist) / radius;
    float theta = percent * angle;
    float s = sin(theta);
    float c = cos(theta);
    tc = vec2(dot(tc, vec2(c, -s)), dot(tc, vec2(s, c)));
  }
  tc += center;
   
  return tc;
}

void main (void)
{
	float posX = gl_TexCoord[0].s;
	float posY = gl_TexCoord[0].t; 
	float texelSizeX = 1.0 / widthScreen; //size of one texel 
	float texelSizeY = 1.0 / heightScreen; //size of one texel 
	float leftPos = left * texelSizeX;
	float topPos = top * texelSizeY;
	float rightPos = (widthScreen - left) * texelSizeX;
	float bottomPos = (heightScreen - top) * texelSizeY;

	
	vec4 src_color = texture2D(textureScreen, gl_TexCoord[0].st).rgba;
	
	if(posX >= leftPos && posX < rightPos && posY >= topPos && posY < bottomPos)
	{
		float xStart = leftPos;
		float xEnd = rightPos;
		float xSize = xEnd - xStart;
		
		float yStart = topPos;
		float yEnd = bottomPos;
		float ySize = yEnd - yStart;
		
		float x = ((posX - leftPos) / xSize) * widthBitmap;
		float y = ((posY - topPos) / ySize) * heightBitmap;
		
		vec2 point = PostFX(x, y);
		
		posX = (point.x / widthBitmap) * xSize + leftPos;
		posY = (point.y / heightBitmap) * ySize + topPos;
		
		gl_FragColor = texture2D(textureScreen, vec2(posX,posY));
	}
	else
	{
		gl_FragColor = texture2D(textureScreen, vec2(posX,posY));
	}

}
