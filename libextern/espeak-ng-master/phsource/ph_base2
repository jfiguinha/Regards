
//====================================================
// 
//====================================================



phoneme a
  vwl starttype #a endtype #a
  length 190
  IF thisPh(isDiminished) THEN
    ChangePhoneme(a/)
    FMT(vowel/a#)
  ENDIF
  FMT(vowel/a_2)
endphoneme


phoneme a/
  vwl starttype #@ endtype #@
  length 190
  FMT(vowel/a#)
endphoneme


phoneme e
  vwl starttype #e endtype #e
  length 180
  FMT(vowel/e)
endphoneme


phoneme E
  vwl starttype #e endtype #e
  length 180
  FMT(vowel/ee_1)
endphoneme


phoneme i
  vwl starttype #i endtype #i
  length 170
  IfNextVowelAppend(;)
  FMT(vowel/i)
endphoneme


phoneme o
  vwl starttype #o endtype #o
  length 180
  FMT(vowel/o)
endphoneme


phoneme O
  vwl starttype #o endtype #o
  length 180
  FMT(vowel/oo_4)
endphoneme


phoneme u
  vwl starttype #u endtype #u
  length 180
  FMT(vowel/u_bck)
endphoneme


phoneme U
  vwl starttype #u endtype #u
  length 180
  FMT(vowel/uu_2)
endphoneme


phoneme y
  vwl starttype #i endtype #i
  length 180
  FMT(vowel/y)
endphoneme


phoneme Y
  vwl starttype #@ endtype #@
  length 180
  FMT(vowel/y#)
endphoneme


phoneme aU
  vwl starttype #a endtype #u
  length 270
  FMT(vdiph/au_4)
endphoneme


phoneme eU
  vwl starttype #e endtype #u
  length 260
  FMT(vdiph/eu)
endphoneme


phoneme iU
  vwl starttype #i endtype #u
  length 240
  FMT(vdiph2/iu)
endphoneme


phoneme aI
  vwl starttype #a endtype #i
  length 250
  FMT(vdiph/ai)
endphoneme


phoneme eI
  vwl starttype #e endtype #i
  length 250
  FMT(vdiph/ei)
endphoneme


phoneme EI
  vwl starttype #e endtype #i
  length 230
  FMT(vdiph/eei)
endphoneme


phoneme oI
  vwl starttype #o endtype #i
  length 240
  FMT(vdiph/oi)
endphoneme


phoneme uI
  vwl starttype #u endtype #i
  length 240
  FMT(vdiph/ui)
endphoneme



// CONSONANTS
//===========


phoneme w2
  liquid
  lengthmod 7

  CALL base1/w
  IF nextPh(isVowel) THEN
    FMT(w/w2)   // longer [w]
  ENDIF
endphoneme


phoneme p
  vls blb stp
  lengthmod 2
  voicingswitch b
  Vowelin  f1=0  f2=1000 -50 -100  f3=-200 80
  Vowelout f1=0  f2=1000 -500 -350  f3=-300 80 rms=30
  IF nextPh(isPause2) THEN
    WAV(ustop/p_unasp_, 80)
  ELIF nextPh(isRhotic) THEN
    WAV(ustop/pr)
  ELIF nextPh(l) THEN
    WAV(ustop/pl)
  ENDIF
  WAV(ustop/p_unasp)
endphoneme

phoneme ts
  import_phoneme consonants/ts
endphoneme


phoneme t        // dental variant of /t/
  vls dnt stp
  lengthmod 2
  voicingswitch d
  Vowelin f1=0  f2=1600 -300 300  f3=-100 80
  Vowelout f1=0 f2=1600 -300 250  f3=-100 80  rms=20
  IF nextPh(isPause2) THEN
    WAV(ustop/t_dnt, 30)
  ENDIF
  WAV(ustop/t_dnt2, 60)
endphoneme


phoneme d       // dental variant of /d/
  vcd dnt stp
  lengthmod 5
  voicingswitch t
  Vowelin f1=2  f2=1500 -300 300  f3=-150 80
  Vowelout f1=2 f2=1500 -300 300  f3=-150 80

  IF PreVoicing THEN
    FMT(d/xd)
  ENDIF

  IF nextPh(isPause2) THEN
    FMT(d/d_) addWav(x/d_)
  ELIF nextPh(isRhotic) THEN
    FMT(d/dr) addWav(x/d_dnt, 110)
  ENDIF

  FMT(d/d) addWav(x/d_dnt, 110)
endphoneme



phoneme k
  vls vel stp
  lengthmod 2
  voicingswitch g
  Vowelin f1=0  f2=2300 200 400  f3=-100 80
  Vowelout f1=0 f2=2300 300 400  f3=-100 80  rms=20

  IF nextPh(isPause2) THEN
    WAV(ustop/k_)
  ELIF nextPh(isRhotic) THEN
    WAV(ustop/kr)
  ELIF nextPh(#i) OR nextPh(;) THEN
    WAV(ustop/ki)
  ELIF nextPh(l) THEN
    WAV(ustop/kl)
  ENDIF
  WAV(ustop/k_unasp, 70)
endphoneme



